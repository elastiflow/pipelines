# Reusable Go Checks Workflow with Semgrep-safe shell usage

on:
  workflow_call:
    inputs:
      configure_git_goprivate:
        type: boolean
        default: false
        description: "Configure git with a github token to fetch private deps. `go_dependency_fetcher_token` is required if true"
      goprivate:
        type: string
        default: "github.com/elastiflow/"
        description: "GOPRIVATE value"
      gosec_args:
        type: string
        default: "-severity high -exclude-dir examples -exclude=G115 ./..."
        description: "gosec tool command line arguments"
      semgrep_cmd:
        type: string
        default: "semgrep scan --config auto --error"
        description: "Semgrep command to run"
      unit_test_cmd:
        type: string
        default: "make test"
        description: "Golang unit test command to run"
      unit_test_report_coverage_cmd:
        type: string
        default: "make report-coverage"
        description: "Command to report the unit tests coverage"
      runs-on:
        type: string
        default: ubuntu-latest
        description: "GHA runner for the job (ubuntu-latest, ubuntu-latest-4c, ubuntu-latest-8c)"
      unit_test_runs-on:
        type: string
        default: ubuntu-latest
        description: "GHA runner for the Unit Test job (ubuntu-latest, ubuntu-latest-4c, ubuntu-latest-8c)"
      timeout-minutes:
        type: number
        default: 10
        description: "Job timeout in minutes"
      go_version_file:
        type: string
        default: 'go.mod'
        description: "Go version file to use"
    secrets:
      go_dependency_fetcher_token:
        required: false
        description: "GitHub token with read access to the Golang dependency repositories"
      git_ssh_key:
        required: false
        description: "Git ssh key with access to ElastiFlow repositories"

env:
  GOPRIVATE: ${{ inputs.goprivate }}

jobs:
  go-mod-tidy:
    name: 'go-mod-tidy'
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Git with goprivate
        if: ${{ inputs.configure_git_goprivate }}
        env:
          GDF_TOKEN: ${{ secrets.go_dependency_fetcher_token }}
          GOPRIVATE: ${{ inputs.goprivate }}
        run: |
          git config --global url."https://$GDF_TOKEN@github.com/elastiflow/collectors".insteadOf "https://github.com/elastiflow/flowcoll"
          git config --global url."https://$GDF_TOKEN@$GOPRIVATE".insteadOf "https://$GOPRIVATE"
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.go_version_file }}
      - name: Run Tidy
        run: |
          find . -type f -name 'go.mod' | while read -r svc; do
            cd "$(dirname "$svc")"
            echo "In $(pwd)"
            go mod tidy
            cd -
          done
          git diff --exit-code
  goimports:
    name: 'goimports'
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Git with goprivate
        if: ${{ inputs.configure_git_goprivate }}
        env:
          GDF_TOKEN: ${{ secrets.go_dependency_fetcher_token }}
          GOPRIVATE: ${{ inputs.goprivate }}
        run: |
          git config --global url."https://$GDF_TOKEN@github.com/elastiflow/collectors".insteadOf "https://github.com/elastiflow/flowcoll"
          git config --global url."https://$GDF_TOKEN@$GOPRIVATE".insteadOf "https://$GOPRIVATE"
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.go_version_file }}
      - name: Run goimports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          goimports -l -w ./
          git diff --exit-code
  staticcheck:
    name: 'staticcheck'
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Git with goprivate
        if: ${{ inputs.configure_git_goprivate }}
        env:
          GDF_TOKEN: ${{ secrets.go_dependency_fetcher_token }}
          GOPRIVATE: ${{ inputs.goprivate }}
        run: |
          git config --global url."https://$GDF_TOKEN@github.com/elastiflow/collectors".insteadOf "https://github.com/elastiflow/flowcoll"
          git config --global url."https://$GDF_TOKEN@$GOPRIVATE".insteadOf "https://$GOPRIVATE"
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.go_version_file }}
      - name: Run Staticcheck
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          find . -type f -name 'go.mod' | while read -r svc; do
            cd "$(dirname "$svc")"
            echo "In $(pwd)"
            staticcheck ./...
            cd -
          done
  gosec:
    name: 'gosec'
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.go_version_file }}
      - name: Security Scan with private
        if: ${{ inputs.configure_git_goprivate }}
        uses: securego/gosec@v2.21.4
        with:
          args: ${{ inputs.gosec_args }}
        env:
          GITHUB_AUTHENTICATION_TOKEN: ${{ secrets.go_dependency_fetcher_token }}
      - name: Security Scan
        uses: securego/gosec@v2.21.4
        with:
          args: ${{ inputs.gosec_args }}
  semgrep:
    name: 'semgrep scan'
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    container:
      image: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v4
      - name: semgrep scan
        env:
          SEMGREP_CMD: ${{ inputs.semgrep_cmd }}
        run: "$SEMGREP_CMD"

  unit_test:
    name: unit test
    runs-on: ${{ inputs.unit_test_runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git with goprivate
        if: ${{ inputs.configure_git_goprivate }}
        env:
          GIT_SSH_KEY: ${{ secrets.git_ssh_key }}
          GDF_TOKEN: ${{ secrets.go_dependency_fetcher_token }}
          GOPRIVATE: ${{ inputs.goprivate }}
        run: |
          if [ -n "$GIT_SSH_KEY" ]; then
            mkdir -p ~/.ssh
            echo "$GIT_SSH_KEY" > ~/.ssh/id_rsa && chmod 0600 ~/.ssh/id_rsa
          else
            echo "No git_ssh_key secret set."
          fi
          git config --global url."https://$GDF_TOKEN@github.com/elastiflow/collectors".insteadOf "https://github.com/elastiflow/flowcoll"
          git config --global url."https://$GDF_TOKEN@$GOPRIVATE".insteadOf "https://$GOPRIVATE"
      - uses: actions/setup-go@v5
        with:
          go-version-file: ${{ inputs.go_version_file }}
      - name: Run tests
        env:
          UNIT_TEST_CMD: ${{ inputs.unit_test_cmd }}
        run: "$UNIT_TEST_CMD"
      - name: Report coverage
        if: always()
        env:
          REPORT_COVERAGE_CMD: ${{ inputs.unit_test_report_coverage_cmd }}
        run: |
          echo "Coverage:" >> "$GITHUB_STEP_SUMMARY"
          echo '```'      >> "$GITHUB_STEP_SUMMARY"
          sh -c "$REPORT_COVERAGE_CMD" >> "$GITHUB_STEP_SUMMARY"
          echo '```'      >> "$GITHUB_STEP_SUMMARY"
